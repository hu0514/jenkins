---
- name: Ansible Deploy test-java-task.yml

  vars:
   fluentd_folder: "{{ lookup('env','log_folder') }}"
   fluentd_project: "{{ lookup('env','JOB_BASE_NAME') }}"
   spring_profiles: "{{ lookup('env','spring_profiles') }}"
   job_name: "{{ lookup('env','JOB_NAME') }}"
   workdir: "{{ lookup('env','workdir') }}"
   jar_path: "{{ lookup('env','jar_path') }}"
   jar_name: "{{ lookup('env','jar_name') }}"
   git_name: "{{ lookup('env','GIT_NAME') }}"

  hosts: "{{job_name}}"
  remote_user: root
  tasks:
  - name: Print Host Name
    debug: msg={{  ansible_nodename  }}

  - name: Install epel-release
    yum: 
     name: epel-release 
     state: present

  - name: Install pip
    yum: 
     name: 
      - python-pip
      - glances
      - jq 
     state: present

  - name: Install docker-py 
    pip:
      name: docker-py

  - name: Get docker-ce.repo
    get_url: url=https://download.docker.com/linux/centos/docker-ce.repo dest=/etc/yum.repos.d/docker-ce.repo

  - name: Install Docker
    yum: 
     name: "{{item}}" 
     state: present
     update_cache: yes
    with_items:
     - yum-utils
     - device-mapper-persistent-data
     - lvm2
     - containerd.io
     - docker-ce-cli
     - docker-ce

  - name: Start Docker Service
    service: 
     name: docker 
     state: started

  - name: Pull An Java Image version=1.8.0_162
    docker_image:
     name: qq79428316/club-java:1.8.0_162
    register: result
    until: result | success
    retries: 20
    delay: 5

  - name: Pull An Fluentd Image
    docker_image:
     name: fluent/fluentd:v1.2.6
    register: result
    until: result | success
    retries: 20
    delay: 5

  - name: Gracefully Halting
    uri:
     url: http://127.0.0.1/actuator/shutdown
     method: POST
    register: shutdown_result
    ignore_errors: yes

  - name: Wait For Java Container Down
    wait_for:
     port: 80
     state: stopped

  - name: Print Gracefully Halting Status
    debug:
     msg: "{{shutdown_result}}"

  - name: Remove Java Container
    docker_container:
     name: "{{job_name}}"
     state: absent

  - name: Send Jar File
    copy:
      src: "/mnt/workspace/{{job_name}}/{{git_name}}/{{jar_path}}"
      dest: /data/java/

  - name: Send Fluentd File
    copy:
      src: /etc/ansible/fluentd.conf
      dest: /data/fluentd/

  - name: Run a Fluentd container
    docker_container:
     name: fluentd-client
     image: fluent/fluentd:v1.2.6
     network_mode: host
     restart_policy: always
     state: started
     recreate: yes
     volumes:
      - /data/fluentd/fluentd.conf:/fluentd/etc/fluent.conf
      - /etc/localtime:/etc/localtime

  - name: Wait For Fluentd Container Up
    wait_for:
     port: 24224
     timeout: 120
     state: started

  - name: Run A Java Container
    docker_container:
     name: "{{job_name}}"
     image: qq79428316/club-java:1.8.0_162
     network_mode: host
     restart_policy: on-failure
     restart_retries: 1
     env:
      fluentd-folder: "{{fluentd_folder}}"
      fluentd-project: "{{fluentd_project}}"
     log_driver: fluentd
     log_options:
      fluentd-address: "localhost:24224"
      fluentd-async-connect: "true"
      fluentd-retry-wait: "5s"
      fluentd-max-retries: "3000"
      tag: "{{fluentd_project}}"
      env: "fluentd-folder,fluentd-project"
     volumes:
       - "/data/java:/data/java"
     command: java -server -jar
                           -Xmx{{ ansible_memtotal_mb // 4 }}m
                           -Xms{{ ansible_memtotal_mb // 4 }}m
                           -Xmn{{ ansible_memtotal_mb // 6 }}m
                           -Xss{% if ansible_memtotal_mb < 2000 %}256k{% else %}1m{% endif %}
                           -XX:SurvivorRatio=8
                           -XX:+UseParallelGC
                           -XX:+UseParallelOldGC
                           -XX:ParallelGCThreads={{ ansible_processor_vcpus }}
                           -XX:MetaspaceSize={{ ansible_memtotal_mb // 8 }}m
                           -XX:MaxMetaspaceSize={{ ansible_memtotal_mb // 4 }}m
                           -XX:MaxTenuringThreshold=7
                           -Dcom.sun.management.jmxremote
                           -Dcom.sun.management.jmxremote.port=9010
                           -Dcom.sun.management.jmxremote.local.only=false
                           -Dcom.sun.management.jmxremote.authenticate=false
                           -Dcom.sun.management.jmxremote.ssl=false
                           /data/java/{{jar_name}} --spring.profiles.active={{spring_profiles}}

  - name: Wait For Java Container Up
    wait_for:
     port: 80
     state: started
     timeout: 120

  - name: Get Service Status
    shell: "curl http://127.0.0.1/actuator/health | jq .status"
    register: service_stats
    until: service_stats.stdout.find("UP")!=-1
    retries: 5
    delay: 30

  - name: Print Service Status
    debug: 
     msg: "{{service_stats.stdout}}"

  - name: Send Jstatd Config File
    copy:
     src: /etc/ansible/jstatd.all.policy
     dest: /data/java/jstatd/

  - name: Run Jstatd
    shell: "docker exec {{job_name}} nohup jstatd -p10003 -J-Djava.security.policy=/data/java/jstatd/jstatd.all.policy &"
  - name: Wait for Jstatd Up
    wait_for:
     port: 10003
     timeout: 120

  - name: Sleep 20 to next
    shell: "sleep 20"
